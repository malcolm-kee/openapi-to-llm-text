API: Swagger Petstore v1.0.7
Description: This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.

Base URL: https://petstore.swagger.io/v2

ENDPOINTS:

POST /pet/{petId}/uploadImage
  Summary: uploads an image
  Parameters:
    - petId (path, integer (required)): ID of pet to update
    - additionalMetadata (formData, string (optional)): Additional data to pass to server
    - file (formData, file (optional)): file to upload
  Responses:
    200: successful operation
      Schema: ApiResponse

POST /pet
  Summary: Add a new pet to the store
  Parameters:
    - body (body, Pet (required)): Pet object that needs to be added to the store
  Responses:
    405: Invalid input

PUT /pet
  Summary: Update an existing pet
  Parameters:
    - body (body, Pet (required)): Pet object that needs to be added to the store
  Responses:
    400: Invalid ID supplied
    404: Pet not found
    405: Validation exception

GET /pet/findByStatus
  Summary: Finds Pets by status
  Parameters:
    - status (query, array (required)): Status values that need to be considered for filter
  Responses:
    200: successful operation
      Schema: Array of Pet
    400: Invalid status value

GET /pet/findByTags
  Summary: Finds Pets by tags
  Parameters:
    - tags (query, array (required)): Tags to filter by
  Responses:
    200: successful operation
      Schema: Array of Pet
    400: Invalid tag value

GET /pet/{petId}
  Summary: Find pet by ID
  Parameters:
    - petId (path, integer (required)): ID of pet to return
  Responses:
    200: successful operation
      Schema: Pet
    400: Invalid ID supplied
    404: Pet not found

POST /pet/{petId}
  Summary: Updates a pet in the store with form data
  Parameters:
    - petId (path, integer (required)): ID of pet that needs to be updated
    - name (formData, string (optional)): Updated name of the pet
    - status (formData, string (optional)): Updated status of the pet
  Responses:
    405: Invalid input

DELETE /pet/{petId}
  Summary: Deletes a pet
  Parameters:
    - api_key (header, string (optional)): No description
    - petId (path, integer (required)): Pet id to delete
  Responses:
    400: Invalid ID supplied
    404: Pet not found

GET /store/inventory
  Summary: Returns pet inventories by status
  Responses:
    200: successful operation
      Schema: object

POST /store/order
  Summary: Place an order for a pet
  Parameters:
    - body (body, Order (required)): order placed for purchasing the pet
  Responses:
    200: successful operation
      Schema: Order
    400: Invalid Order

GET /store/order/{orderId}
  Summary: Find purchase order by ID
  Parameters:
    - orderId (path, integer (required)): ID of pet that needs to be fetched
  Responses:
    200: successful operation
      Schema: Order
    400: Invalid ID supplied
    404: Order not found

DELETE /store/order/{orderId}
  Summary: Delete purchase order by ID
  Parameters:
    - orderId (path, integer (required)): ID of the order that needs to be deleted
  Responses:
    400: Invalid ID supplied
    404: Order not found

POST /user/createWithList
  Summary: Creates list of users with given input array
  Parameters:
    - body (body, array (required)): List of user object
  Responses:
    default: successful operation

GET /user/{username}
  Summary: Get user by user name
  Parameters:
    - username (path, string (required)): The name that needs to be fetched. Use user1 for testing. 
  Responses:
    200: successful operation
      Schema: User
    400: Invalid username supplied
    404: User not found

PUT /user/{username}
  Summary: Updated user
  Parameters:
    - username (path, string (required)): name that need to be updated
    - body (body, User (required)): Updated user object
  Responses:
    400: Invalid user supplied
    404: User not found

DELETE /user/{username}
  Summary: Delete user
  Parameters:
    - username (path, string (required)): The name that needs to be deleted
  Responses:
    400: Invalid username supplied
    404: User not found

GET /user/login
  Summary: Logs user into the system
  Parameters:
    - username (query, string (required)): The user name for login
    - password (query, string (required)): The password for login in clear text
  Responses:
    200: successful operation
      Schema: string
    400: Invalid username/password supplied

GET /user/logout
  Summary: Logs out current logged in user session
  Responses:
    default: successful operation

POST /user/createWithArray
  Summary: Creates list of users with given input array
  Parameters:
    - body (body, array (required)): List of user object
  Responses:
    default: successful operation

POST /user
  Summary: Create user
  Parameters:
    - body (body, User (required)): Created user object
  Responses:
    default: successful operation

SCHEMAS:

ApiResponse:
  - code: integer (format: int32)
  - type: string
  - message: string

Category:
  - id: integer (format: int64)
  - name: string

Pet:
  - id: integer (format: int64)
  - category: object
  - name: string (required)
  - photoUrls: array (required)
  - tags: array
  - status: string

Tag:
  - id: integer (format: int64)
  - name: string

Order:
  - id: integer (format: int64)
  - petId: integer (format: int64)
  - quantity: integer (format: int32)
  - shipDate: string (format: date-time)
  - status: string
  - complete: boolean

User:
  - id: integer (format: int64)
  - username: string
  - firstName: string
  - lastName: string
  - email: string
  - password: string
  - phone: string
  - userStatus: integer (format: int32)

SECURITY:
- API Key authentication (header: api_key)
- OAuth2 authentication
