API: Sunshine Conversations API v17.0.0
Description: # Introduction

<aside class="notice"><strong>Note:</strong> The documentation below applies to v2 of the API. For users wanting to access v1, please proceed <a href="https://docs.smooch.io/rest/v1">here</a> instead.
</aside>

Welcome to the Sunshine Conversations API. The API allows you to craft entirely unique messaging experiences for your app and website as well as talk to any backend or external service.

The Sunshine Conversations API is designed according to REST principles. The API accepts JSON in request bodies and requires that the `content-type: application/json` header be specified for
all such requests. The API will always respond with an object. Depending on context, resources may be returned as single objects or as arrays of objects, nested within the response object.

## Regions

Licensed Zendesk customers should use the following API host for all API requests, unless otherwise specified:

```
https://{subdomain}.zendesk.com/sc
```

For legacy Sunshine Conversations customers, see [regions](https://docs.smooch.io/guide/regions/) for the list of supported base URLs.

<aside class="notice"><strong>Note:</strong> When configuring an API host, make sure to always use <code>https</code>. Some API clients can have unexpected behaviour when following redirects from <code>http</code> to <code>https</code>.</aside>

## Errors

Sunshine Conversations uses standard HTTP status codes to communicate errors. In general, a `2xx` status code indicates success while `4xx` indicates an error, in which case, the response body includes a JSON object which includes an array of errors, with a text `code` and `title` containing more details. Multiple errors can only be included in a `400 Bad Request`. A `5xx` status code indicates that something went wrong on our end.

```javascript
{
   "errors":  [
    {
        "code": "unauthorized",
        "title": "Authorization is required"
    }
   ]
}
```

## API Version

The latest version of the API is v2. Version v1.1 is still supported and you can continue using it but we encourage you to upgrade to the latest version. To learn more about API versioning at Sunshine Conversations, including instructions on how to upgrade to the latest version, [visit our docs](https://developer.zendesk.com/documentation/conversations/references/api-versioning/).

## API Pagination and Records Limits

All paginated endpoints support cursor-based pagination.

### Cursor Pagination

Cursor-based pagination is a common pagination strategy that avoids many of the pitfalls of offset–limit pagination. It works by returning a pointer to a specific item in the dataset. On subsequent requests, the server returns results after the given pointer.

A `page[after]` or `page[before]` query string parameter may be provided, they are cursors pointing to a record id.

The `page[after]` cursor indicates that only records **subsequent** to it should be returned.

The `page[before]` cursor indicates that only records **preceding** it should be returned.

**Only one** of `page[after]` or `page[before]` may be provided in a query, not both.

In most endpoints, an optional `page[size]` query parameter may be passed to control the number of records returned by the request.

## API Libraries

Sunshine Conversations provides an official API library for [Java](https://github.com/zendesk/sunshine-conversations-java), with more languages to come. These helpful libraries wrap calls to the API and can make interfacing with Sunshine Conversations easier.

## Postman Collection

<a style="display:inline-block;background:url(https://run.pstmn.io/button.svg);height:30px;width: 123px;" href="https://docs.smooch.io/sunco-openapi/postman_collection.json"></a>

In addition to API libraries, Sunshine Conversations also has a Postman collection that can be used for development or testing purposes. See the [guide](https://developer.zendesk.com/documentation/conversations/references/openapi-specification/) for information on how to install and use the collection in your Postman client.

## Rate Limits

Sunshine Conversations APIs are subject to rate limiting. If the rate limit is exceeded a `429 Too Many Requests` HTTP status code may be returned. We apply rate limits to prevent abuse, spam, denial-of-service attacks, and similar issues. Our goal is to keep the limits high enough so that any application using the platform as intended will not encounter them. However usage spikes do occur and encountering a rate limit may be unavoidable. In order to avoid production outages, you should implement `429` retry logic using exponential backoff and jitter.

## Conversation Size Limits

Conversations are limited to 30,000 messages. Once you reach this maximum, a `423 Locked` HTTP status code is returned when trying to post a new message. To allow more messages to be sent to the affected conversation, you must [delete all messages](https://developer.zendesk.com/api-reference/conversations/#operation/DeleteAllMessages) to make room.

## Request Size Limits

The Sunshine Conversations API imposes the following size limits on HTTP requests:

| Request Type | Limit |
| ------------ | ----- |
| JSON         | 100kb |
| File upload  | 50mb  |

## Authorization

This is an overview of how authorization works with the Sunshine Conversations API. Sunshine Conversations allows basic authentication or JSON Web Tokens (JWTs) as authentication methods for server-to-server calls. [See below](#section/Introduction/Authentication) for more details.

There are three authorization scopes available for the v2 API: `integration`, `app`, and `account`.

| Scope       | Availability                                | Authorized Methods                              |
| ----------- | ------------------------------------------- | ----------------------------------------------- |
| account     | Sunshine Conversations direct accounts only | All methods                                     |
| app         | All account types                           | All methods besides Account Provisioning        |
| integration | All account types                           | Users, Conversations, Attachments, and Webhooks |

<aside class="notice"><strong>Note:</strong> An additional scope of <code>user</code> is used for <a href="https://developer.zendesk.com/documentation/conversations/messaging-platform/users/authenticating-users/">authenticating users</a> on the Zendesk Messaging SDKs. This scope, however, cannot be used with the v2 API.</aside>

## Authentication

To authenticate requests to the API, you will need an API key, composed of a key id and a secret.
For an overview of how authentication works in Sunshine Conversations and instructions on how to generate an API key, see [API authentication](https://developer.zendesk.com/documentation/conversations/getting-started/api-authentication/).

API requests can be authenticated in two ways:

- With Basic authentication you can make requests using an API key directly.
- With JSON Web Tokens (JWTs) you sign tokens with an API key, which are then used to authenticate with the API. See [When to Use JWTs](https://developer.zendesk.com/documentation/conversations/getting-started/api-authentication/#when-to-use-jwts) to learn if JWTs are relevant for your usage.
- Before using an API key in production, make sure to familiarize yourself with best practices on how to [securely handle credentials](https://developer.zendesk.com/documentation/conversations/getting-started/api-authentication/#secure-credential-handling).

### Basic Authentication

API requests can be authenticated with [basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) using an API key. The key id is used as the username and the secret as the password. The scope of access is determined by the owner of the API key. See the [guide](https://developer.zendesk.com/documentation/conversations/getting-started/api-authentication/#access-scopes) for more details.

### JWTs

JSON Web Tokens (JWTs) are an industry standard authentication method. The full specification is described [here](https://tools.ietf.org/html/rfc7519), and a set of supported JWT libraries for a variety of languages and platforms can be found at http://jwt.io. To summarize, a JWT is composed of a header, a payload, and a signature. The payload contains information called claims which describe the subject to whom the token was issued.
The JWT itself is transmitted via the HTTP `authorization` header. The token should be prefixed with “Bearer” followed by a space. For example: `Bearer your-jwt`.
To generate a JWT, you need an API key, which is composed of a key ID and a secret. The key ID is included in a JWT’s header, as the `kid` property, while the secret is used to sign the JWT.
For more in-depth coverage, see the [guide](https://developer.zendesk.com/documentation/conversations/getting-started/api-authentication/#jwt-authentication).

#### Header

The JWT header must contain the key id (kid) of the API key that is used to sign it. The algorithm (alg) used should be HS256. Unsigned JWTs are not accepted.

```javascript
{
    "alg": "HS256",
    "typ": "JWT",
    "kid": "act_5963ceb97cde542d000dbdb1"
}
```

#### Payload

The JWT payload must include a scope claim which specifies the caller’s scope of access.

- account-scoped JWTs must be generated with an API key associated with a Sunshine Conversations account (act*) or service account (svc*).

```javascript
{
    "scope": "account"
}
```

- app-scoped JWTs can be generated with an API key associated with an app (app\_).

```javascript
{
   "scope": "app"
}
```


Base URL: https://api.smooch.io
Additional URLs:
  - https://api.eu-1.smooch.io (European Union server (for legacy Sunshine Conversations only))
  - https://{subdomain}.zendesk.com/sc (Your Zendesk subdomain)

ENDPOINTS:

POST /v2/apps
  Summary: Create App
  Request Body:
    Content: application/json
    Schema: appCreateBody
  Responses:
    201: Created
      Content: application/json
      Schema: appResponse
    400: Bad request
      Content: application/json
      Schema: errorResponse
    402: Payment required
      Content: application/json
      Schema: errorResponse

GET /v2/apps
  Summary: List Apps
  Parameters:
    - page (query, page (optional)): Contains parameters for applying cursor pagination.
    - filter (query, Object (serviceAccountId) (optional)): Contains parameters for filtering the results.
  Responses:
    200: Ok
      Content: application/json
      Schema: appListResponse
    400: Bad request
      Content: application/json
      Schema: errorResponse
    403: Forbidden
      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}
  Summary: Get App
  Responses:
    200: Ok
      Content: application/json
      Schema: appResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

PATCH /v2/apps/{appId}
  Summary: Update App
  Request Body:
    Content: application/json
    Schema: appUpdateBody
  Responses:
    200: Ok
      Content: application/json
      Schema: appResponse
    400: Bad request
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

DELETE /v2/apps/{appId}
  Summary: Delete App
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/keys
  Summary: Create App Key
  Request Body:
    Content: application/json
    Schema: Object (displayName)
  Responses:
    201: Created
      Content: application/json
      Schema: appKeyResponse

GET /v2/apps/{appId}/keys
  Summary: List App Keys
  Responses:
    200: Ok
      Content: application/json
      Schema: appKeyListResponse

GET /v2/apps/{appId}/keys/{keyId}
  Summary: Get App Key
  Responses:
    200: Ok
      Content: application/json
      Schema: appKeyResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

DELETE /v2/apps/{appId}/keys/{keyId}
  Summary: Delete App Key
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/attachments
  Summary: Upload Attachment
  Request Body:
    Content: multipart/form-data
    Schema: attachmentUploadBody
  Responses:
    201: Created
      Content: application/json
      Schema: attachmentResponse
    400: Bad request
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/attachments/remove
  Summary: Delete Attachment
  Request Body:
    Content: application/json
    Schema: attachmentDeleteBody
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/conversations
  Summary: Create Conversation
  Request Body:
    Content: application/json
    Schema: conversationCreateBody
  Responses:
    201: Created
      Content: application/json
      Schema: conversationResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}/conversations
  Summary: List Conversations
  Parameters:
    - page (query, page (optional)): Contains parameters for applying cursor pagination.
    - filter (query, Object (userId, userExternalId) (required)): Contains parameters for filtering the results.
  Responses:
    200: Ok
      Content: application/json
      Schema: conversationListResponse
    400: Bad request
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}/conversations/{conversationId}
  Summary: Get Conversation
  Responses:
    200: Ok
      Content: application/json
      Schema: conversationResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

PATCH /v2/apps/{appId}/conversations/{conversationId}
  Summary: Update Conversation
  Request Body:
    Content: application/json
    Schema: conversationUpdateBody
  Responses:
    200: Ok
      Content: application/json
      Schema: conversationResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

DELETE /v2/apps/{appId}/conversations/{conversationId}
  Summary: Delete Conversation
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    400: Bad request
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/conversations/{conversationId}/join
  Summary: Join Conversation
  Request Body:
    Content: application/json
    Schema: participantJoinBody
  Responses:
    201: Created
      Content: application/json
      Schema: Object (participant)
    400: Bad request
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}/conversations/{conversationId}/participants
  Summary: List Participants
  Parameters:
    - page (query, page (optional)): Contains parameters for applying cursor pagination.
  Responses:
    200: Ok
      Content: application/json
      Schema: participantListResponse
    400: Bad request
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/conversations/{conversationId}/leave
  Summary: Leave Conversation
  Request Body:
    Content: application/json
    Schema: participantLeaveBody
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/conversations/{conversationId}/messages
  Summary: Post Message
  Request Body:
    Content: application/json
    Schema: messagePost
  Responses:
    201: Created
      Content: application/json
      Schema: messagePostResponse
    423: Message limit reached
<aside class="notice"><strong>Note:</strong> To learn more about the conversation message limit, consult the section in the introduction linked <a href="#section/Introduction/Conversation-Size-Limits">here</a>.</aside>

      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}/conversations/{conversationId}/messages
  Summary: List Messages
  Parameters:
    - page (query, page (optional)): Contains parameters for applying cursor pagination.
  Responses:
    200: Ok
      Content: application/json
      Schema: messageListResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

DELETE /v2/apps/{appId}/conversations/{conversationId}/messages
  Summary: Delete All Messages
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    404: Not found
      Content: application/json
      Schema: errorResponse

DELETE /v2/apps/{appId}/conversations/{conversationId}/messages/{messageId}
  Summary: Delete Message
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/conversations/{conversationId}/activity
  Summary: Post Activity
  Request Body:
    Content: application/json
    Schema: activityPost
  Responses:
    200: Ok
      Content: application/json
      Schema: object

POST /v2/apps/{appId}/conversations/{conversationId}/acceptControl
  Summary: Accept Control
  Request Body:
    Content: application/json
    Schema: acceptControlBody
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    403: Forbidden
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/conversations/{conversationId}/offerControl
  Summary: Offer Control
  Request Body:
    Content: application/json
    Schema: offerControlBody
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/conversations/{conversationId}/passControl
  Summary: Pass Control
  Request Body:
    Content: application/json
    Schema: passControlBody
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/conversations/{conversationId}/releaseControl
  Summary: Release Control
  Request Body:
    Content: application/json
    Schema: releaseControlBody
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    403: Forbidden
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/conversations/{conversationId}/download
  Summary: Download Message Ref
  Request Body:
    Content: application/json
    Schema: downloadMessageRefBody
  Responses:
    200: Ok
      Content: application/json
      Schema: object

POST /v2/apps/{appId}/conversations/{conversationId}/conversionEvents
  Summary: Post Conversion Events
  Request Body:
    Content: application/json
    Schema: conversionEventsBody
  Responses:
    200: Ok
      Content: application/json
      Schema: conversionEventsResponse

POST /v2/apps/{appId}/integrations
  Summary: Create Integration
  Request Body:
    Content: application/json
    Schema: integration
  Responses:
    201: Created
      Content: application/json
      Schema: Unknown
    400: Bad request
      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}/integrations
  Summary: List Integrations
  Parameters:
    - page (query, page (optional)): Contains parameters for applying cursor pagination.
    - filter (query, Object (types) (optional)): Contains parameters for filtering the results.
  Responses:
    200: Ok
      Content: application/json
      Schema: integrationListResponse
    400: Bad request
      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}/integrations/{integrationId}
  Summary: Get Integration
  Responses:
    200: Ok
      Content: application/json
      Schema: Unknown
    404: Not found
      Content: application/json
      Schema: errorResponse

PATCH /v2/apps/{appId}/integrations/{integrationId}
  Summary: Update Integration
  Request Body:
    Content: application/json
    Schema: integrationUpdate
  Responses:
    200: Ok
      Content: application/json
      Schema: Unknown
    404: Not found
      Content: application/json
      Schema: errorResponse

DELETE /v2/apps/{appId}/integrations/{integrationId}
  Summary: Delete Integration
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    400: Bad request
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/integrations/{integrationId}/keys
  Summary: Create Integration Key
  Request Body:
    Content: application/json
    Schema: Object (displayName)
  Responses:
    201: Created
      Content: application/json
      Schema: integrationApiKeyResponse

GET /v2/apps/{appId}/integrations/{integrationId}/keys
  Summary: List Integration Keys
  Responses:
    200: Ok
      Content: application/json
      Schema: Object (keys)
    400: Bad request
      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}/integrations/{integrationId}/keys/{keyId}
  Summary: Get Integration Key
  Responses:
    200: Ok
      Content: application/json
      Schema: integrationApiKeyResponse

DELETE /v2/apps/{appId}/integrations/{integrationId}/keys/{keyId}
  Summary: Delete Integration Key
  Responses:
    200: Ok
      Content: application/json
      Schema: object

POST /v2/apps/{appId}/integrations/{integrationId}/webhooks
  Summary: Create Webhook
  Request Body:
    Content: application/json
    Schema: webhookCreateBody
  Responses:
    201: Created
      Content: application/json
      Schema: webhookResponse
    400: Bad request
      Content: application/json
      Schema: errorResponse
    403: Forbidden
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}/integrations/{integrationId}/webhooks
  Summary: List Webhooks
  Responses:
    200: Ok
      Content: application/json
      Schema: webhookListResponse
    403: Forbidden
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}/integrations/{integrationId}/webhooks/{webhookId}
  Summary: Get Webhook
  Responses:
    200: Ok
      Content: application/json
      Schema: webhookResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

PATCH /v2/apps/{appId}/integrations/{integrationId}/webhooks/{webhookId}
  Summary: Update Webhook
  Request Body:
    Content: application/json
    Schema: webhookBody
  Responses:
    200: Ok
      Content: application/json
      Schema: webhookResponse
    400: Bad request
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

DELETE /v2/apps/{appId}/integrations/{integrationId}/webhooks/{webhookId}
  Summary: Delete Webhook
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/switchboards
  Summary: Create Switchboard
  Responses:
    201: Created
      Content: application/json
      Schema: switchboardResponse
    400: Bad request
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}/switchboards
  Summary: List Switchboards
  Responses:
    200: Ok
      Content: application/json
      Schema: switchboardListResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

PATCH /v2/apps/{appId}/switchboards/{switchboardId}
  Summary: Update Switchboard
  Request Body:
    Content: application/json
    Schema: switchboardUpdateBody
  Responses:
    200: Ok
      Content: application/json
      Schema: switchboardResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

DELETE /v2/apps/{appId}/switchboards/{switchboardId}
  Summary: Delete Switchboard
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/switchboards/{switchboardId}/switchboardIntegrations
  Summary: Create Switchboard Integration
  Request Body:
    Content: application/json
    Schema: switchboardIntegrationCreateBody
  Responses:
    201: Created
      Content: application/json
      Schema: switchboardIntegrationResponse
    400: Bad request
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}/switchboards/{switchboardId}/switchboardIntegrations
  Summary: List Switchboard Integrations
  Responses:
    200: Ok
      Content: application/json
      Schema: switchboardIntegrationListResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

PATCH /v2/apps/{appId}/switchboards/{switchboardId}/switchboardIntegrations/{switchboardIntegrationId}
  Summary: Update Switchboard Integration
  Request Body:
    Content: application/json
    Schema: switchboardIntegrationUpdateBody
  Responses:
    200: Ok
      Content: application/json
      Schema: switchboardIntegrationResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

DELETE /v2/apps/{appId}/switchboards/{switchboardId}/switchboardIntegrations/{switchboardIntegrationId}
  Summary: Delete Switchboard Integration
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/users
  Summary: Create User
  Request Body:
    Content: application/json
    Schema: userCreateBody
  Responses:
    201: Created
      Content: application/json
      Schema: userResponse
    409: Conflict
      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}/users/{userIdOrExternalId}
  Summary: Get User
  Responses:
    200: Ok
      Content: application/json
      Schema: userResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

PATCH /v2/apps/{appId}/users/{userIdOrExternalId}
  Summary: Update User
  Request Body:
    Content: application/json
    Schema: userUpdateBody
  Responses:
    200: Ok
      Content: application/json
      Schema: userResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

DELETE /v2/apps/{appId}/users/{userIdOrExternalId}
  Summary: Delete User
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/users/{userIdOrExternalId}/clients
  Summary: Create Client
  Request Body:
    Content: application/json
    Schema: clientCreate
  Responses:
    201: Created
      Content: application/json
      Schema: Object (client)

GET /v2/apps/{appId}/users/{userIdOrExternalId}/clients
  Summary: List Clients
  Parameters:
    - page (query, page (optional)): Contains parameters for applying cursor pagination.
  Responses:
    200: Ok
      Content: application/json
      Schema: clientListResponse
    400: Bad request
      Content: application/json
      Schema: errorResponse

DELETE /v2/apps/{appId}/users/{userIdOrExternalId}/clients/{clientId}
  Summary: Remove Client
  Responses:
    200: Ok
      Content: application/json
      Schema: object
    400: Bad request
      Content: application/json
      Schema: errorResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

GET /v2/apps/{appId}/users/{userIdOrExternalId}/devices
  Summary: List Devices
  Responses:
    200: Ok
      Content: application/json
      Schema: deviceListResponse

GET /v2/apps/{appId}/users/{userIdOrExternalId}/devices/{deviceId}
  Summary: Get Device
  Responses:
    200: Ok
      Content: application/json
      Schema: deviceResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

DELETE /v2/apps/{appId}/users/{userIdOrExternalId}/personalinformation
  Summary: Delete User Personal Information
  Responses:
    200: Ok
      Content: application/json
      Schema: userResponse
    404: Not found
      Content: application/json
      Schema: errorResponse

POST /v2/apps/{appId}/users/{zendeskId}/sync
  Summary: Synchronize User
  Request Body:
    Content: application/json
    Schema: syncUserBody
  Responses:
    200: Ok
      Content: application/json
      Schema: userResponse

GET /v2/tokenInfo
  Summary: Get Token Info
  Responses:
    200: Ok
      Content: application/json
      Schema: appResponse

GET /oauth/authorize
  Summary: Authorize
  Parameters:
    - client_id (query, string (required)): Your integration’s unique identifier
    - response_type (query, string (required)): For now the only acceptable value is code.
    - state (query, string (optional)): You may pass in any arbitrary string value here which will be returned to you along with the code via browser redirect.
    - redirect_uri (query, string (optional)): You may pass in a redirect_uri to determine which URI the response is redirected to. This URI must be contained in the list configured by your integration. If this option is not passed, the first URI present in the list will be used.
  Responses:
    302: Found
      Content: text/plain
      Schema: string

POST /oauth/token
  Summary: Get Token
  Request Body:
    Content: application/json
    Schema: Object (code, grant_type, client_id...)
  Responses:
    200: Ok
      Content: application/json
      Schema: Unknown

DELETE /oauth/authorization
  Summary: Revoke Access
  Responses:
    200: Ok
      Content: application/json
      Schema: object

SCHEMAS:
> * = required

page: object
  - after: string
  - before: string
  - size: integer

displayName: string

appSettings: object
  - conversationRetentionSeconds: integer
  - maskCreditCardNumbers: boolean
  - useAnimalNames: boolean
  - echoPostback: boolean
  - ignoreAutoConversationStart: boolean
  - multiConvoEnabled: boolean
  - appLocalizationEnabled: boolean

metadata: object

app: object
  - id: string
  - displayName: displayName
  - settings: object
  - metadata: object

meta: object
  - hasMore: boolean
  - afterCursor: string
  - beforeCursor: string

links: object
  - prev: string
  - next: string

appListResponse: object
  - apps: array
  - meta: object
  - links: object

error: object
  - code: string
  - title: string

errorResponse: object
  - errors: array

appCreateBody: object
  - displayName*: displayName
  - settings: object
  - metadata: object

appResponse: object
  - app: app

appUpdateBody: object
  - displayName: displayName
  - settings: object
  - metadata: object

appKey: object
  - id: string
  - displayName: string
  - secret: string

appKeyListResponse: object
  - keys: array

appKeyResponse: object
  - key: appKey

attachmentUploadBody: object
  - source*: string (format: binary)

attachmentSchema: object
  - mediaUrl: string
  - mediaType: string

attachmentResponse: object
  - attachment: attachmentSchema

attachmentDeleteBody: object
  - mediaUrl*: string

conversationType: string [personal, sdkGroup]

name: string

switchboardIntegrationId: string

switchboardIntegrationType: string

switchboardIntegrationWebhook: object
  - id: string
  - name: object
  - integrationId: object
  - integrationType: object

conversationTruncated: object
  - id: string
  - type: object
  - metadata: object
  - activeSwitchboardIntegration: switchboardIntegrationWebhook
  - pendingSwitchboardIntegration: switchboardIntegrationWebhook

description: string

icon: string (format: uri)

conversation: allOf [conversationTruncated, <conversation__inline__1>]

<conversation__inline__1>: object
  - isDefault: boolean
  - displayName: displayName
  - description: object
  - iconUrl: object
  - businessLastRead: string
  - lastUpdatedAt: string
  - createdAt: string

conversationListResponse: object
  - conversations: array
  - meta: object
  - links: object

participantSubSchema: anyOf [<participantSubSchema__inline__1>, <participantSubSchema__inline__2>]

<participantSubSchema__inline__1>: object
  - userId: string
  - subscribeSDKClient: boolean

<participantSubSchema__inline__2>: object
  - userExternalId: string
  - subscribeSDKClient: boolean

conversationCreateBody: object
  - type*: object
  - participants: array
  - displayName: displayName
  - description: object
  - iconUrl: object
  - metadata: object

conversationResponse: object
  - conversation: conversation

conversationUpdateBody: object
  - displayName: displayName
  - description: object
  - iconUrl: object
  - metadata: object

participantJoinBody: allOf [participantSubSchema]

clientType: string [apple, gbm, googlercs, instagram, kakao, line, mailgun, messagebird, messenger, slackconnect, sdk, telegram, twilio, twitter, viber, wechat, whatsapp]

clientAssociation: object
  - type: object
  - clientId: string

participant: object
  - id: string
  - userId: string
  - unreadCount: integer
  - clientAssociations: array
  - userExternalId: string
  - lastRead: string

participantListResponse: object
  - participants: array
  - meta: object
  - links: object

participantLeaveBody: oneOf [<participantLeaveBody__inline__1>, <participantLeaveBody__inline__2>, <participantLeaveBody__inline__3>]

<participantLeaveBody__inline__1>: object
  - userId: string

<participantLeaveBody__inline__2>: object
  - userExternalId: string

<participantLeaveBody__inline__3>: object
  - participantId: string

author: object
  - type*: string [business, user]
  - subtypes: array
  - userId: string
  - userExternalId: string
  - displayName: string
  - avatarUrl: icon

ticketClosed: object
  - type*: string [ticket:closed]
  - data: object

transferToEmail: object
  - type*: string [ticket:transfer:email]
  - data: object

activityMessage: oneOf [ticketClosed, transferToEmail]

htmlText: string

markdownText: string

buy: object
  - type*: string
  - text*: string
  - amount*: integer
  - currency: string
  - metadata: object

extraChannelOptions: object
  - messenger: object

link: object
  - type*: string
  - uri*: string
  - text*: string
  - default: boolean
  - metadata: object
  - extraChannelOptions: object

locationRequest: object
  - type*: string
  - text*: string
  - metadata: object

postback: object
  - type*: string
  - text*: string
  - payload*: string
  - metadata: object

reply: object
  - type*: string
  - text*: string
  - payload*: string
  - metadata: object
  - iconUrl: string

webview: object
  - type*: string
  - uri*: string
  - text*: string
  - default: boolean
  - metadata: object
  - extraChannelOptions: object
  - size: string [compact, tall, full]
  - fallback*: string
  - openOnReceive: boolean

action: oneOf [buy, link, locationRequest, postback, reply, webview]

textMessage: object
  - type*: string
  - text: string
  - htmlText: object
  - blockChatInput: boolean
  - markdownText: object
  - actions: array
  - payload: string

actionSubset: oneOf [buy, link, postback, webview]

item: object
  - title*: string
  - description: string
  - mediaUrl: string (format: uri)
  - mediaType: string
  - altText: string
  - size: string [compact, large]
  - actions*: array
  - metadata: object

carouselMessage: object
  - type*: string
  - text: string
  - blockChatInput: boolean
  - items*: array
  - displaySettings: object

fileMessage: object
  - type*: string
  - mediaUrl*: string (format: uri)
  - mediaSize: number
  - mediaType: string
  - altText: string
  - text: string
  - blockChatInput: boolean
  - htmlText: object
  - markdownText: object
  - attachmentId: string

field: object
  - type*: string [email, select, text]
  - name*: string
  - label*: string
  - text: string
  - email: string
  - select: array

formOptions: array
  items: object

formMessageField: allOf [field, <formMessageField__inline__1>]

<formMessageField__inline__1>: object
  - placeholder: string
  - minSize: integer
  - maxSize: integer
  - options: object

formMessage: object
  - type*: string
  - submitted: boolean
  - blockChatInput: boolean
  - fields*: array

formResponseMessageField: allOf [field, <formResponseMessageField__inline__1>]

<formResponseMessageField__inline__1>: object
  - quotedMessageId: string

formResponseMessage: object
  - type*: string
  - fields*: array
  - textFallback: string

imageMessage: object
  - type*: string
  - mediaUrl*: string (format: uri)
  - mediaType: string
  - mediaSize: number
  - altText: string
  - text: string
  - blockChatInput: boolean
  - htmlText: object
  - markdownText: object
  - actions: array
  - attachmentId: string

listMessage: object
  - type*: string
  - blockChatInput: boolean
  - items*: array
  - actions: array

locationMessage: object
  - type*: string
  - text: string
  - blockChatInput: boolean
  - coordinates*: object
  - location: object

templateMessage: object
  - type*: string
  - blockChatInput: boolean
  - template*: object

content: oneOf [textMessage, carouselMessage, fileMessage, formMessage, formResponseMessage, imageMessage, listMessage, locationMessage, templateMessage]

client: object
  - id: string
  - type: object
  - status: string [active, blocked, inactive, pending]
  - integrationId: string
  - externalId: string
  - lastSeen: string
  - linkedAt: string
  - displayName: string
  - avatarUrl: string (format: uri)
  - info: object
  - raw: object

device: object
  - id: string
  - type: string [android, ios, web]
  - guid: string
  - clientId: string
  - status: string [active, inactive]
  - integrationId: string
  - lastSeen: string
  - pushNotificationToken: string
  - info: object
  - appVersion: string

source: object
  - type*: string
  - integrationId: string
  - originalMessageId: string
  - originalMessageTimestamp: string
  - client: client
  - device: device

message: object
  - id: string
  - received: string
  - author: object
  - activity: activityMessage
  - content: content
  - source: object
  - quotedMessage: quotedMessage
  - metadata: metadata
  - deleted: boolean

quotedMessageMessage: object
  - type*: string
  - message: message

quotedMessageExternalMessageId: object
  - type*: string
  - externalMessageId: string

quotedMessage: oneOf [quotedMessageMessage, quotedMessageExternalMessageId]

messageListResponse: object
  - messages: array
  - meta: object
  - links: object

destination: oneOf [<destination__inline__1>, <destination__inline__2>]

<destination__inline__1>: object
  - integrationId: string

<destination__inline__2>: object
  - integrationType: string

appleMessageOverridePayload: object
  - payload: object
  - withCapabilities: array

messageOverridePayload: object
  - payload: object

messageOverride: anyOf [<messageOverride__inline__1>, <messageOverride__inline__2>, <messageOverride__inline__3>, <messageOverride__inline__4>]

<messageOverride__inline__1>: object
  - apple: object

<messageOverride__inline__2>: object
  - line: object

<messageOverride__inline__3>: object
  - messenger: object

<messageOverride__inline__4>: object
  - whatsapp: object

messagePost: object
  - author*: author
  - content*: content
  - destination: object
  - metadata: object
  - override: object
  - schema: string

messagePostResponse: object
  - messages: array

activityTypes: object
  - type: string [conversation:read, typing:start, typing:stop]

activityPost: allOf [<activityPost__inline__1>, activityTypes]

<activityPost__inline__1>: object
  - author: author

acceptControlBody: object
  - metadata: metadata

offerControlBody: object
  - switchboardIntegration*: string
  - metadata: metadata

passControlBody: object
  - switchboardIntegration*: string
  - reason: string [ticketClosed, transferToEmail]
  - metadata: metadata

releaseControlBody: object
  - reason: string [ticketClosed, transferToEmail]
  - metadata: metadata

downloadMessageRefBody: allOf [<downloadMessageRefBody__inline__1>]

<downloadMessageRefBody__inline__1>: object
  - userId: string
  - apple: object

metaConversionEvent: object
  - payload*: object

conversionEventsBody: oneOf [<conversionEventsBody__inline__1>, <conversionEventsBody__inline__2>, <conversionEventsBody__inline__3>]

<conversionEventsBody__inline__1>: object
  - messenger: object

<conversionEventsBody__inline__2>: object
  - instagram: object

<conversionEventsBody__inline__3>: object
  - whatsapp: object

conversionEvents: object
  - datasetId: string
  - eventsReceived: integer

conversionEventsResponse: object
  - conversionEvents: object

integration: object
  - id: string
  - type*: string
  - status: object
  - displayName: string

defaultResponderId: object
  - defaultResponderId: string

defaultResponder: object
  - defaultResponder: object

android: allOf [integration, <android__inline__1>, defaultResponderId, defaultResponder]

<android__inline__1>: object
  - type: string
  - projectId: string
  - clientEmail: string
  - privateKey: string
  - serverKey: string
  - senderId: string
  - canUserSeeConversationList: boolean
  - canUserCreateMoreConversations: boolean
  - attachmentsEnabled: boolean

apple: allOf [integration, <apple__inline__1>, defaultResponderId, defaultResponder]

<apple__inline__1>: object
  - type: string
  - businessId*: string
  - apiSecret*: string
  - mspId*: string
  - authenticationMessageSecret: string

target: string

triggers: array
  items: string

includeFullUser: boolean

includeFullSource: boolean

webhook: object
  - id: string
  - version: string
  - target*: object
  - triggers*: object
  - secret: string
  - includeFullUser: object
  - includeFullSource: object

custom: allOf [integration, <custom__inline__1>]

<custom__inline__1>: object
  - type: string
  - webhooks*: array

instagram: allOf [integration, <instagram__inline__1>, defaultResponderId, defaultResponder]

<instagram__inline__1>: object
  - type: string
  - pageAccessToken*: string
  - appId*: string
  - appSecret*: string
  - businessName: string
  - businessUsername: string
  - pageId: string
  - businessId: string
  - username: string
  - userId: string

ios: allOf [integration, <ios__inline__1>, defaultResponderId, defaultResponder]

<ios__inline__1>: object
  - type: string
  - certificate: string
  - password: string
  - production: boolean
  - autoUpdateBadge: boolean
  - canUserSeeConversationList: boolean
  - canUserCreateMoreConversations: boolean
  - attachmentsEnabled: boolean

line: allOf [integration, <line__inline__1>, defaultResponderId, defaultResponder]

<line__inline__1>: object
  - type: string
  - channelId: string
  - channelSecret: string
  - channelAccessToken: string
  - serviceCode: string
  - switcherSecret: string
  - qrCodeUrl: string
  - lineId: string

mailgun: allOf [integration, <mailgun__inline__1>, defaultResponderId, defaultResponder]

<mailgun__inline__1>: object
  - type: string
  - apiKey*: string
  - domain*: string
  - incomingAddress*: string
  - hideUnsubscribeLink: boolean
  - fromAddress: string

messagebird: allOf [integration, <messagebird__inline__1>, defaultResponderId, defaultResponder]

<messagebird__inline__1>: object
  - type: string
  - accessKey*: string
  - signingKey*: string
  - originator*: string
  - webhookSecret: string

messenger: allOf [integration, <messenger__inline__1>, defaultResponderId, defaultResponder]

<messenger__inline__1>: object
  - type: string
  - pageAccessToken*: string
  - appId*: string
  - appSecret*: string
  - pageId: number
  - pageName: string

telegram: allOf [integration, <telegram__inline__1>, defaultResponderId, defaultResponder]

<telegram__inline__1>: object
  - type: string
  - token*: string
  - username: string
  - botId: string

twilio: allOf [integration, <twilio__inline__1>, defaultResponderId, defaultResponder]

<twilio__inline__1>: object
  - type: string
  - accountSid*: string
  - authToken*: string
  - phoneNumberSid: string
  - messagingServiceSid: string

twitter: allOf [integration, <twitter__inline__1>, defaultResponderId, defaultResponder]

<twitter__inline__1>: object
  - type: string
  - tier*: string [enterprise]
  - envName: string
  - consumerKey*: string
  - consumerSecret*: string
  - accessTokenKey*: string
  - accessTokenSecret*: string

unity: allOf [integration, <unity__inline__1>, defaultResponderId, defaultResponder]

<unity__inline__1>: object
  - type: string
  - canUserSeeConversationList: boolean
  - canUserCreateMoreConversations: boolean
  - attachmentsEnabled: boolean

viber: allOf [integration, <viber__inline__1>, defaultResponderId, defaultResponder]

<viber__inline__1>: object
  - type: string
  - token*: string
  - uri: string
  - accountId: string

prechatCapture: object
  - avatarUrl: string
  - enabled: boolean
  - enableEmailLinking: boolean
  - fields: array

web: allOf [integration, <web__inline__1>, defaultResponderId, defaultResponder]

<web__inline__1>: object
  - type: string
  - brandColor: string
  - fixedIntroPane: boolean
  - conversationColor: string
  - actionColor: string
  - displayStyle: string
  - buttonIconUrl: string
  - buttonWidth: string
  - buttonHeight: string
  - integrationOrder: array
  - businessName: string
  - businessIconUrl: string
  - backgroundImageUrl: string
  - originWhitelist: array
  - prechatCapture: prechatCapture
  - canUserSeeConversationList: boolean
  - canUserCreateMoreConversations: boolean
  - attachmentsEnabled: boolean

whatsapp: allOf [integration, <whatsapp__inline__1>, defaultResponderId, defaultResponder]

<whatsapp__inline__1>: object
  - type: string
  - hsmFallbackLanguage: string
  - accountId: string
  - accountManagementAccessToken: string
  - phoneNumber: string

status: string [inactive, active, error]

integrationListResponse: object
  - integrations: array
  - meta: object
  - links: object

integrationResponse: object
  - integration: object

integrationUpdateBase: object
  - displayName: string
  - defaultResponderId: string

androidUpdate: allOf [integrationUpdateBase, <androidUpdate__inline__1>]

<androidUpdate__inline__1>: object
  - projectId: string
  - clientEmail: string
  - privateKey: string
  - serverKey: string
  - senderId: string
  - canUserSeeConversationList: boolean
  - canUserCreateMoreConversations: boolean

appleUpdate: allOf [integrationUpdateBase, <appleUpdate__inline__1>]

<appleUpdate__inline__1>: object
  - authenticationMessageSecret: string

customUpdate: object
  - displayName: string

instagramUpdate: allOf [integrationUpdateBase, <instagramUpdate__inline__1>]

<instagramUpdate__inline__1>: object
  - pageAccessToken: string

iosUpdate: allOf [integrationUpdateBase, <iosUpdate__inline__1>]

<iosUpdate__inline__1>: object
  - certificate: string
  - password: string
  - production: boolean
  - autoUpdateBadge: boolean
  - canUserSeeConversationList: boolean
  - canUserCreateMoreConversations: boolean

lineUpdate: allOf [integrationUpdateBase]

mailgunUpdate: allOf [integrationUpdateBase, <mailgunUpdate__inline__1>]

<mailgunUpdate__inline__1>: object
  - hideUnsubscribeLink: boolean
  - fromAddress: string

messageBirdUpdate: allOf [integrationUpdateBase]

messengerUpdate: allOf [integrationUpdateBase, <messengerUpdate__inline__1>]

<messengerUpdate__inline__1>: object
  - pageAccessToken: string

telegramUpdate: allOf [integrationUpdateBase]

twilioUpdate: allOf [integrationUpdateBase]

twitterUpdate: allOf [integrationUpdateBase]

unityUpdate: allOf [integrationUpdateBase, <unityUpdate__inline__1>]

<unityUpdate__inline__1>: object
  - canUserSeeConversationList: boolean
  - canUserCreateMoreConversations: boolean

viberUpdate: allOf [integrationUpdateBase]

webUpdate: allOf [integrationUpdateBase, <webUpdate__inline__1>]

<webUpdate__inline__1>: object
  - brandColor: string
  - fixedIntroPane: boolean
  - conversationColor: string
  - actionColor: string
  - displayStyle: string
  - buttonIconUrl: string
  - buttonWidth: string
  - buttonHeight: string
  - integrationOrder: array
  - businessName: string
  - businessIconUrl: string
  - backgroundImageUrl: string
  - originWhitelist: array
  - prechatCapture: prechatCapture
  - canUserSeeConversationList: boolean
  - canUserCreateMoreConversations: boolean

whatsAppUpdate: allOf [integrationUpdateBase, <whatsAppUpdate__inline__1>]

<whatsAppUpdate__inline__1>: object
  - hsmFallbackLanguage: string
  - accountId: string
  - accountManagementAccessToken: string

integrationUpdate: oneOf [androidUpdate, appleUpdate, customUpdate, instagramUpdate, iosUpdate, lineUpdate, mailgunUpdate, messageBirdUpdate, messengerUpdate, telegramUpdate, twilioUpdate, twitterUpdate, unityUpdate, viberUpdate, webUpdate, whatsAppUpdate]

apiKey: object
  - id: string
  - displayName: displayName
  - secret: string

integrationApiKeyResponse: object
  - key: object

webhookListResponse: object
  - webhooks: array

webhookBody: object
  - target: object
  - triggers: object
  - includeFullUser: object
  - includeFullSource: object

webhookCreateBody: allOf [webhookBody]

webhookResponse: object
  - webhook: webhook

enabled: boolean

defaultSwitchboardIntegrationId: string

switchboard: object
  - id*: string
  - enabled*: object
  - defaultSwitchboardIntegrationId: object

switchboardListResponse: object
  - switchboards: array

switchboardResponse: object
  - switchboard: switchboard

switchboardUpdateBody: object
  - enabled: object
  - defaultSwitchboardIntegrationId: object

deliverStandbyEvents: boolean

nextSwitchboardIntegrationId: string

messageHistoryCount: integer

switchboardIntegration: object
  - id*: string
  - name*: object
  - integrationId*: object
  - integrationType*: object
  - deliverStandbyEvents*: object
  - nextSwitchboardIntegrationId: object
  - messageHistoryCount: object

switchboardIntegrationListResponse: object
  - switchboardIntegrations: array

switchboardIntegrationCreateBody: object
  - name*: object
  - integrationId: switchboardIntegrationId
  - integrationType: switchboardIntegrationType
  - deliverStandbyEvents: deliverStandbyEvents
  - nextSwitchboardIntegrationId: object
  - messageHistoryCount: object

switchboardIntegrationResponse: object
  - switchboardIntegration: switchboardIntegration

switchboardIntegrationUpdateBody: object
  - name: object
  - integrationId: switchboardIntegrationId
  - integrationType: switchboardIntegrationType
  - deliverStandbyEvents: object
  - nextSwitchboardIntegrationId: object
  - messageHistoryCount: object

signedUpAt: string

toBeRetained: boolean

profile: object
  - givenName: string
  - surname: string
  - email: string (format: email)
  - avatarUrl: string (format: uri)
  - locale: string

userCreateBody: object
  - externalId*: string
  - signedUpAt: object
  - toBeRetained: object
  - profile: object
  - metadata: object

userTruncated: object
  - id: string
  - authenticated: boolean
  - externalId: string
  - zendeskId: string

identity: object
  - type: string
  - value: string
  - verification: string

user: allOf [userTruncated, <user__inline__1>]

<user__inline__1>: object
  - signedUpAt: signedUpAt
  - toBeRetained: toBeRetained
  - profile: profile
  - metadata: metadata
  - identities: array

userResponse: object
  - user: user

userUpdateBody: object
  - signedUpAt: signedUpAt
  - toBeRetained: toBeRetained
  - profile: profile
  - metadata: object

clientListResponse: object
  - clients: array
  - meta: object
  - links: object

matchCriteriaMailgun: allOf [matchCriteriaBase, <matchCriteriaMailgun__inline__1>]

<matchCriteriaMailgun__inline__1>: object
  - type: string
  - address*: string
  - subject: string

matchCriteriaMessagebird: allOf [matchCriteriaBase, <matchCriteriaMessagebird__inline__1>]

<matchCriteriaMessagebird__inline__1>: object
  - type: string
  - phoneNumber*: string

matchCriteriaTwilio: allOf [matchCriteriaBase, <matchCriteriaTwilio__inline__1>]

<matchCriteriaTwilio__inline__1>: object
  - type: string
  - phoneNumber*: string

matchCriteriaWhatsapp: allOf [matchCriteriaBase, <matchCriteriaWhatsapp__inline__1>]

<matchCriteriaWhatsapp__inline__1>: object
  - type: string
  - phoneNumber*: string

matchCriteriaBase: object
  - type*: string
  - integrationId*: string
  - primary: boolean

matchCriteria: oneOf [matchCriteriaMailgun, matchCriteriaMessagebird, matchCriteriaTwilio, matchCriteriaWhatsapp]

clientCreate: object
  - matchCriteria*: object
  - confirmation*: object
  - target*: object

deviceListResponse: object
  - devices: array

deviceResponse: object
  - device: device

syncUserBody: object
  - survivingZendeskId: string

appSubSchema: object
  - id: string

webhookSubSchema: object
  - id: string
  - version: string

eventSubSchema: object
  - id: string
  - type: string
  - createdAt: string

sourceWebhook: object
  - type: string
  - integrationId: string
  - originalMessageId: string
  - originalMessageTimestamp: string
  - client: client
  - device: device

clientAddEvent: allOf [eventSubSchema, <clientAddEvent__inline__1>]

<clientAddEvent__inline__1>: object
  - payload: object

clientRemoveEvent: allOf [eventSubSchema, <clientRemoveEvent__inline__1>]

<clientRemoveEvent__inline__1>: object
  - payload: object

clientUpdateEvent: allOf [eventSubSchema, <clientUpdateEvent__inline__1>]

<clientUpdateEvent__inline__1>: object
  - payload: object

campaign: object
  - id: string

sourceWithCampaignWebhook: allOf [sourceWebhook, <sourceWithCampaignWebhook__inline__1>]

<sourceWithCampaignWebhook__inline__1>: object
  - campaign: object

referral: object
  - code: string
  - details: object

conversationCreateEvent: allOf [eventSubSchema, <conversationCreateEvent__inline__1>]

<conversationCreateEvent__inline__1>: object
  - payload: object

conversationJoinEvent: allOf [eventSubSchema, <conversationJoinEvent__inline__1>]

<conversationJoinEvent__inline__1>: object
  - payload: object

conversationLeaveEvent: allOf [eventSubSchema, <conversationLeaveEvent__inline__1>]

<conversationLeaveEvent__inline__1>: object
  - payload: object

conversationRemoveEvent: allOf [eventSubSchema, <conversationRemoveEvent__inline__1>]

<conversationRemoveEvent__inline__1>: object
  - payload: object

conversationMessageDeliveryPayload: object
  - user: user
  - conversation: conversationTruncated
  - message: object
  - destination: object
  - externalMessages: array
  - isFinalEvent: boolean

conversationMessageDeliveryChannelEvent: allOf [eventSubSchema, <conversationMessageDeliveryChannelEvent__inline__1>]

<conversationMessageDeliveryChannelEvent__inline__1>: object
  - payload: object

conversationMessageDeliveryFailureEvent: allOf [eventSubSchema, <conversationMessageDeliveryFailureEvent__inline__1>]

<conversationMessageDeliveryFailureEvent__inline__1>: object
  - payload: allOf [conversationMessageDeliveryPayload, object]

conversationMessageDeliveryUserEvent: allOf [eventSubSchema, <conversationMessageDeliveryUserEvent__inline__1>]

<conversationMessageDeliveryUserEvent__inline__1>: object
  - payload: object

authorWebhook: object
  - type*: string [business, user]
  - userId: string
  - user: user

messageWebhook: object
  - id: string
  - received: string
  - author: object
  - content: content
  - source: allOf [source, object]
  - quotedMessage: quotedMessage
  - metadata: metadata
  - deleted: boolean

conversationMessageEvent: allOf [eventSubSchema, <conversationMessageEvent__inline__1>]

<conversationMessageEvent__inline__1>: object
  - payload: object

postbackWebhook: object
  - payload: string
  - metadata: object

conversationPostbackEvent: allOf [eventSubSchema, <conversationPostbackEvent__inline__1>]

<conversationPostbackEvent__inline__1>: object
  - payload: object

activity: allOf [activityTypes, <activity__inline__1>]

<activity__inline__1>: object
  - source: sourceWebhook
  - author: object

conversationReadEvent: allOf [eventSubSchema, <conversationReadEvent__inline__1>]

<conversationReadEvent__inline__1>: object
  - payload: object

conversationReferralEvent: allOf [eventSubSchema, <conversationReferralEvent__inline__1>]

<conversationReferralEvent__inline__1>: object
  - payload: object

conversationTypingEvent: allOf [eventSubSchema, <conversationTypingEvent__inline__1>]

<conversationTypingEvent__inline__1>: object
  - payload: object

switchboardAcceptControl: allOf [eventSubSchema, <switchboardAcceptControl__inline__1>]

<switchboardAcceptControl__inline__1>: object
  - payload: object

switchboardAcceptControlFailure: allOf [eventSubSchema, <switchboardAcceptControlFailure__inline__1>]

<switchboardAcceptControlFailure__inline__1>: object
  - payload: object

switchboardOfferControl: allOf [eventSubSchema, <switchboardOfferControl__inline__1>]

<switchboardOfferControl__inline__1>: object
  - payload: object

switchboardOfferControlFailure: allOf [eventSubSchema, <switchboardOfferControlFailure__inline__1>]

<switchboardOfferControlFailure__inline__1>: object
  - payload: object

switchboardPassControl: allOf [eventSubSchema, <switchboardPassControl__inline__1>]

<switchboardPassControl__inline__1>: object
  - payload: object

switchboardPassControlFailure: allOf [eventSubSchema, <switchboardPassControlFailure__inline__1>]

<switchboardPassControlFailure__inline__1>: object
  - payload: object

switchboardReleaseControl: allOf [eventSubSchema, <switchboardReleaseControl__inline__1>]

<switchboardReleaseControl__inline__1>: object
  - payload: object

userMergeEvent: allOf [eventSubSchema, <userMergeEvent__inline__1>]

<userMergeEvent__inline__1>: object
  - payload: object

userUpdateEvent: allOf [eventSubSchema, <userUpdateEvent__inline__1>]

<userUpdateEvent__inline__1>: object
  - payload: object

userRemoveEvent: allOf [eventSubSchema, <userRemoveEvent__inline__1>]

<userRemoveEvent__inline__1>: object
  - payload: object

SECURITY:
- HTTP bearer authentication
- HTTP basic authentication
